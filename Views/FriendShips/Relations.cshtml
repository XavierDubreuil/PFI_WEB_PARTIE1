@model IEnumerable<ChatManager.Models.Relation>
@foreach (var item in Model)
{
    var current = ChatManager.Models.OnlineUsers.GetSessionUser();
    var user = ChatManager.Models.DB.Users.Get(item.UsersId.usr2);
    bool isOnline = ChatManager.Models.OnlineUsers.IsOnLine(user.Id);
    <div class="loginsContainerDay">
        <div class="friendship-userInfo">
            @Helper.AvatarUser(user, "UserSmallAvatar")
        </div>
        <div style="text-align:center" title="Status de connexion">
            @Helper.OnLineStatusIcon(isOnline, user.Blocked)
        </div>
        <div class="sectionCmd">
            @if (!user.Blocked)
            {
                switch (item.Rapport)
                {
                    case ChatManager.Models.TypeRapport.Pas_Encore_Ami:
                        <div id="PasEncoreAmi_@(current.Id)_@user.Id" class="PasEncoreAmi iconsFriendShips">
                            @Helper.Icon("", "fa fa-plus-circle green", "")
                        </div>
                        break;
                    case ChatManager.Models.TypeRapport.Requête_Entrante:
                        <div class="iconsFriendShips">
                            <div id="AccepterDemande_@(current.Id)_@user.Id" class="AccepterDemande">
                                @Helper.Icon("", "fa fa-check green", "")
                            </div>
                            <div id="RefuserDemande_@(current.Id)_@user.Id" class="RefuserDemande">
                                @Helper.Icon("", "fa fa-times red", "")
                            </div>
                        </div>
                        break;
                    case ChatManager.Models.TypeRapport.Demande_Envoyée:
                        <div class="iconsFriendShips">
                            @Helper.Icon("", "fa fa-clock-o green", "")
                            <div id="RetirerDemande_@(current.Id)_@user.Id" class="RetirerDemande">
                                @Helper.Icon("", "fa fa-times red", "")
                            </div>
                        </div>
                        break;
                    case ChatManager.Models.TypeRapport.Amis:
                        <div class="iconsFriendShips">
                            @Helper.Icon("", "fa fa-check-circle green", "")
                            <div id="RetirerDemande_@(current.Id)_@user.Id" class="RetirerDemande">

                                @Helper.Icon("", "fa fa-times red", "")
                            </div>
                        </div>
                        break;
                    case ChatManager.Models.TypeRapport.A_Refusé_Demande:
                        <div class="iconsFriendShips">
                            @Helper.Icon("", "fa fa-times-circle red", "")
                            <div id="PasEncoreAmi_@(current.Id)_@user.Id" class="PasEncoreAmi iconsFriendShips">
                                @Helper.Icon("", "fa fa-plus-circle green", "")
                            </div>
                        </div>
                        break;
                    case ChatManager.Models.TypeRapport.Demande_Refusé:
                        <div class="iconsFriendShips">
                            @Helper.Icon("", "fa fa-times-circle red", "")
                        </div>
                        break;
                }
            }
            else
            {
                @Helper.Icon("", "fa fa-ban red", "")

            }
        </div>
    </div>
    <br />

    <hr />
}
@*@helper IconCmd(string controller, string action, string icon_class, string TooltipMessage, string ToolTipPlacement = "bottom")                 @Helper.IconCmd("Accounts", "Login", "menu-Icon fa fa-sign-in", "Se connecter...")
*@
